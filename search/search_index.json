{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Prompt Library","text":"<p>A comprehensive collection of prompts and best practices for AI-assisted development.</p>"},{"location":"#overview","title":"Overview","text":"<p>This library contains a curated collection of prompts, techniques, and best practices for working with AI tools like GitHub Copilot, ChatGPT, and other AI assistants. The content is organized by task type, role, and development phase to help you find the most effective prompts for your specific needs.</p>"},{"location":"#github-copilot-your-ai-powered-hero","title":"GitHub Copilot: Your AI-Powered Hero","text":"<p>GitHub Copilot is at the heart of this library, empowering developers to write better code faster. With its AI-driven suggestions, Copilot helps you:</p> <ul> <li>Accelerate Development: Generate boilerplate code, functions, and even entire modules with ease.</li> <li>Improve Code Quality: Get real-time suggestions for cleaner, more efficient code.</li> <li>Learn on the Go: Discover new libraries, frameworks, and best practices as you code.</li> <li>Collaborate Effectively: Use AI to enhance code reviews and team productivity.</li> </ul> <p>Explore the following resources to make the most of GitHub Copilot:</p> <ul> <li>Prompt Engineering Best Practices: Learn how to craft effective prompts for Copilot.</li> <li>GitHub Copilot Specific Techniques: Unlock advanced features and tips.</li> <li>Copilot Chat Patterns: Master conversational AI for coding assistance.</li> </ul>"},{"location":"#how-github-copilot-helps-in-sdlc","title":"How GitHub Copilot Helps in SDLC","text":"SDLC Stage Designer Developer DevOps Engineer Tester Requirements Generate user stories and wireframes Suggest technical requirements Define CI/CD pipeline requirements Identify test case requirements Design Create mockups and prototypes Suggest design patterns Plan infrastructure design Review design for testability Development Provide design feedback Generate boilerplate code Automate deployment scripts Create automated test scripts Testing Validate design against requirements Suggest debugging techniques Monitor test environments Automate regression testing Deployment Review deployment plans Optimize deployment configurations Automate deployment pipelines Validate deployment success Maintenance Suggest improvements to designs Refactor legacy code Monitor system performance Automate maintenance testing"},{"location":"#key-categories","title":"Key Categories","text":"<ul> <li>AI &amp; ML Development: Resources for data preprocessing and training script creation</li> <li>Best Practices: Guidelines for code reviews, prompt engineering, and security</li> <li>Code Optimization: Techniques for improving efficiency and performance</li> <li>Documentation: Tools for creating effective documentation</li> <li>Role-Specific Guidance: Tailored prompts for different roles (Designer, Developer, DevOps, etc.)</li> <li>Testing: Strategies for test case creation and automation</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":""},{"location":"#persona-wise-resources","title":"Persona-Wise Resources","text":"<ul> <li>Designer Resources</li> <li>Developer Resources</li> <li>DevOps Engineer Resources</li> <li>Product Manager Resources</li> <li>Tester Resources</li> </ul>"},{"location":"#sdlc-stage-specific-resources","title":"SDLC Stage-Specific Resources","text":"<ul> <li>Requirements Gathering</li> <li>Design Phase</li> <li>Development Phase</li> <li>Testing Phase</li> <li>Deployment Phase</li> <li>Maintenance Phase</li> </ul>"},{"location":"#troubleshooting-and-optimization","title":"Troubleshooting and Optimization","text":"<ul> <li>Debugging Runtime Errors</li> <li>Identifying Performance Bottlenecks</li> <li>Refactoring Code</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Browse the navigation menu to explore different categories or use the search function to find specific topics. Each page contains practical examples and templates you can adapt for your own projects.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>To contribute to this library, please follow our contribution guidelines and submit a pull request with your suggested additions or improvements.</p>"},{"location":"AI_MLDevelopment/PreprocessingData/","title":"Basic Data Preprocessing with GitHub Copilot","text":""},{"location":"AI_MLDevelopment/PreprocessingData/#prompt-1-simple-data-preprocessing-steps","title":"Prompt 1: Simple Data Preprocessing Steps","text":"<pre><code>Use case: Help data scientists and ML engineers create preprocessing code for machine learning models.\n\nPrompt: Preprocess a dataset for a machine learning model. The dataset details are:\n\ndataset_type: {dataset_type}\ntarget_variable: {target_variable}\nbasic_issues: {basic_issues}\n\nGenerate a preprocessing script that includes:\n- Loading data.\n- Basic cleaning.\n- Feature transformations.\n- Standard preprocessing steps.\n`\n\nKey points:\n1. Use standard libraries like pandas, numpy, and scikit-learn.\n2. Focus on common preprocessing steps.\n3. Include basic data exploration.\n4. Use standard approaches for handling missing values and outliers.\n</code></pre>"},{"location":"AI_MLDevelopment/WritingTrainingScripts/","title":"Writing Training Scripts for GitHub Copilot","text":""},{"location":"AI_MLDevelopment/WritingTrainingScripts/#prompt-1-creating-basic-model-training-structure","title":"Prompt 1: Creating Basic Model Training Structure","text":"<p>``` Use case: Help developers create training scripts for machine learning models.</p> <p>Prompt: Develop a training script for a basic machine learning model. The model details are:</p> <p>model_type: {model_type} dataset_description: {dataset_description} training_objective: {training_objective}</p> <p>Generate a training script structure that includes: - Data loading and preprocessing. - Model definition with standard architecture. - Training loop with evaluation.</p> <p>Key points: 1. Use simple architecture and standard components. 2. Focus on basic pipeline components: data loading, model definition, training loop, evaluation. 3. Use standard libraries like PyTorch, TensorFlow, or scikit-learn. 4. Avoid complex custom implementations.`</p>"},{"location":"BestPractices/CodeReviewBestPractices/AdherenceToStandards/","title":"Adherence to Coding Standards","text":""},{"location":"BestPractices/CodeReviewBestPractices/AdherenceToStandards/#prompt-1-reviewing-code-for-standards","title":"Prompt 1: Reviewing Code for Standards","text":"<pre><code>Use Case: To guide developers in reviewing code for adherence to coding standards.\n\nPrompt: You are reviewing a pull request for a new feature. The code details are as follows:\n\nCode_snippet: {code_snippet}\n\nGenerate feedback on the code, ensuring:\n- Proper naming conventions.\n- Consistent indentation and formatting.\n- Use of comments for clarity.\n\nKey points:\n1. Focus on adherence to project-specific coding standards.\n2. Provide actionable feedback for improvement.\n3. Use examples to illustrate best practices.\n\nor give reference to the project's coding standards document #coding standards.md\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/","title":"Handling Auto-Generated Code Reviews","text":""},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#best-practices-for-reviewing-copilot-generated-code","title":"Best Practices for Reviewing Copilot-Generated Code","text":""},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#1-initial-assessment","title":"1. Initial Assessment","text":"<pre><code>Review checklist for generated code:\n- Code correctness\n- Business logic alignment\n- Security implications\n- Performance considerations\n- Testing coverage\n- Documentation completeness\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#2-common-patterns-to-watch","title":"2. Common Patterns to Watch","text":"<ol> <li>Security Concerns</li> <li>Hardcoded credentials</li> <li>Unsafe data handling</li> <li>Missing input validation</li> <li> <p>Insecure defaults</p> </li> <li> <p>Performance Issues</p> </li> <li>Inefficient algorithms</li> <li>Unnecessary loops</li> <li>Memory leaks</li> <li> <p>Resource management</p> </li> <li> <p>Code Quality</p> </li> <li>Error handling</li> <li>Edge cases</li> <li>Type safety</li> <li>Code duplication</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#3-review-strategies","title":"3. Review Strategies","text":"<ol> <li>Incremental Review</li> <li>Review generated code in small chunks</li> <li>Verify each functional unit</li> <li>Test incrementally</li> <li> <p>Document review decisions</p> </li> <li> <p>Contextual Understanding</p> </li> <li>Review surrounding code</li> <li>Check dependencies</li> <li>Verify integration points</li> <li> <p>Consider system impact</p> </li> <li> <p>Documentation Review</p> </li> <li>Check generated comments</li> <li>Verify API documentation</li> <li>Review error messages</li> <li>Validate examples</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#guidelines-for-reviewers","title":"Guidelines for Reviewers","text":""},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#1-code-generation-context","title":"1. Code Generation Context","text":"<pre><code>Check for:\n- Original prompt used\n- Generation parameters\n- Alternative suggestions\n- Manual modifications\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#2-integration-points","title":"2. Integration Points","text":"<pre><code>Verify:\n- API contracts\n- Data flow\n- Error handling\n- State management\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#3-testing-coverage","title":"3. Testing Coverage","text":"<pre><code>Ensure:\n- Unit tests\n- Integration tests\n- Edge case coverage\n- Performance tests\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#common-pitfalls","title":"Common Pitfalls","text":"<ol> <li>Over-acceptance</li> <li>Accepting code without thorough review</li> <li>Missing security implications</li> <li>Ignoring edge cases</li> <li> <p>Skipping performance analysis</p> </li> <li> <p>Under-utilization</p> </li> <li>Rejecting useful generations</li> <li>Excessive manual rewriting</li> <li>Ignoring suggested improvements</li> <li> <p>Missing optimization opportunities</p> </li> <li> <p>Poor Documentation</p> </li> <li>Not documenting generation context</li> <li>Missing review decisions</li> <li>Incomplete test coverage</li> <li>Unclear modification reasons</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#team-collaboration","title":"Team Collaboration","text":"<ol> <li>Knowledge Sharing</li> <li>Document successful patterns</li> <li>Share review checklists</li> <li>Maintain best practices</li> <li> <p>Track common issues</p> </li> <li> <p>Review Process</p> </li> <li>Define review stages</li> <li>Set acceptance criteria</li> <li>Document review findings</li> <li> <p>Track improvements</p> </li> <li> <p>Continuous Improvement</p> </li> <li>Gather feedback</li> <li>Refine guidelines</li> <li>Update processes</li> <li>Share learnings</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#ai-assisted-code-review-guidelines","title":"AI-Assisted Code Review Guidelines","text":""},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#1-pre-review-preparation","title":"1. Pre-Review Preparation","text":"<pre><code>Checklist before reviewing AI-generated code:\n- Understand the original prompt/intent\n- Review relevant documentation\n- Check similar patterns in codebase\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#2-review-dimensions","title":"2. Review Dimensions","text":"<ol> <li>Code Quality</li> <li>Adherence to project style</li> <li>Naming conventions</li> <li>Function modularity</li> <li> <p>Error handling coverage</p> </li> <li> <p>Business Logic</p> </li> <li>Requirements alignment</li> <li>Edge case handling</li> <li>Integration points</li> <li> <p>Data flow correctness</p> </li> <li> <p>Technical Debt</p> </li> <li>Code duplication</li> <li>Complexity assessment</li> <li>Maintainability impact</li> <li>Technical constraints</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#3-review-strategy","title":"3. Review Strategy","text":"<ol> <li> <p>Contextual Review <pre><code>For each generated section:\n1. Understand generation context\n2. Verify pattern consistency\n3. Check integration touchpoints\n4. Validate error handling\n</code></pre></p> </li> <li> <p>Documentation Review <pre><code>Verify presence and quality of:\n- Function documentation\n- Parameter descriptions\n- Return value specs\n- Error scenarios\n</code></pre></p> </li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#4-feedback-approach","title":"4. Feedback Approach","text":"<ol> <li>Constructive Guidance</li> <li>Explain why changes are needed</li> <li>Suggest specific improvements</li> <li>Provide example patterns</li> <li> <p>Reference documentation</p> </li> <li> <p>Learning Opportunities</p> </li> <li>Share best practices</li> <li>Explain design choices</li> <li>Document patterns</li> <li>Build knowledge base</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#5-review-checklist","title":"5. Review Checklist","text":"<pre><code>Each review should verify:\n1. Business Logic\n   \u25a1 Requirements met\n   \u25a1 Edge cases handled\n   \u25a1 Error scenarios covered\n\n2. Code Quality\n   \u25a1 Project standards followed\n   \u25a1 Documentation complete\n   \u25a1 Tests included\n   \u25a1 Performance considered\n\n3. Security\n   \u25a1 Input validation\n   \u25a1 Access control\n   \u25a1 Data handling\n   \u25a1 Security best practices\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/HandlingAutoGeneratedCode/#6-continuous-improvement","title":"6. Continuous Improvement","text":"<ol> <li>Pattern Recognition</li> <li>Document common issues</li> <li>Share successful patterns</li> <li>Update guidelines</li> <li> <p>Refine review process</p> </li> <li> <p>Knowledge Sharing</p> </li> <li>Maintain review guides</li> <li>Document decisions</li> <li>Share learnings</li> <li>Update standards</li> </ol>"},{"location":"BestPractices/CodeReviewBestPractices/IdentifyingPotentialBugs/","title":"Identifying Potential Bugs","text":""},{"location":"BestPractices/CodeReviewBestPractices/IdentifyingPotentialBugs/#prompt-1-code-review-for-bug-prevention","title":"Prompt 1: Code Review for Bug Prevention","text":"<pre><code>Use Case: To help developers identify potential bugs during code reviews.\n\nPrompt: You are reviewing code for potential bugs. The code details are as follows:\n\nCode_snippet: {code_snippet}\nProgramming_language: {programming_language}\n\nGenerate a list of potential bugs or issues, including:\n- Logic errors.\n- Edge cases.\n- Error handling concerns.\n</code></pre>"},{"location":"BestPractices/CodeReviewBestPractices/SuggestingImprovements/","title":"Suggesting Improvements","text":""},{"location":"BestPractices/CodeReviewBestPractices/SuggestingImprovements/#prompt-1-code-improvement-recommendations","title":"Prompt 1: Code Improvement Recommendations","text":"<pre><code>Use Case: To help developers suggest improvements during code reviews.\n\nPrompt: You are reviewing code and suggesting improvements. The code details are as follows:\n\nCode_snippet: {code_snippet}\nProgramming_language: {programming_language}\n\nGenerate a list of improvement suggestions, including:\n- Code readability enhancements.\n- Performance optimizations.\n- Best practices implementation.\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/","title":"GitHub Copilot Chat Interaction Patterns","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#effective-question-patterns","title":"Effective Question Patterns","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-code-understanding","title":"1. Code Understanding","text":"<pre><code>/explain\nWhat does this code do? Focus on:\n- Main functionality\n- Key algorithms\n- Data flow\n- Error handling\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-problem-solving","title":"2. Problem Solving","text":"<pre><code>I'm trying to [goal]. My current approach is:\n[code or description]\n\nThe issue I'm facing is:\n[problem description]\n\nWhat's the best way to solve this?\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#3-code-review","title":"3. Code Review","text":"<pre><code>/analyze\nReview this code for:\n- Potential bugs\n- Performance issues\n- Security concerns\n- Style violations\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#chat-commands","title":"Chat Commands","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-code-generation","title":"1. Code Generation","text":"<pre><code>/fix\n- Specific error fixes\n- Implementation improvements\n- Style updates\n\n/test\n- Unit test generation\n- Test case suggestions\n- Edge case coverage\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-documentation","title":"2. Documentation","text":"<pre><code>/doc\n- Function documentation\n- API descriptions\n- Usage examples\n\n/explain\n- Code explanations\n- Algorithm breakdowns\n- Architecture overview\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#conversation-strategies","title":"Conversation Strategies","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-iterative-refinement","title":"1. Iterative Refinement","text":"<pre><code>1. Start with high-level request\n2. Clarify specific requirements\n3. Refine generated code\n4. Add error handling\n5. Optimize performance\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-context-building","title":"2. Context Building","text":"<pre><code>1. Describe project context\n2. Explain technical constraints\n3. Specify requirements\n4. Share example patterns\n5. Iterate on solutions\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#best-practices","title":"Best Practices","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-clear-communication","title":"1. Clear Communication","text":"<ul> <li>Specific questions</li> <li>Complete context</li> <li>Expected outcomes</li> <li>Constraints and requirements</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-efficient-interaction","title":"2. Efficient Interaction","text":"<ul> <li>Break down complex requests</li> <li>Use appropriate commands</li> <li>Provide feedback</li> <li>Build on responses</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#3-learning-approach","title":"3. Learning Approach","text":"<ul> <li>Ask for explanations</li> <li>Request alternatives</li> <li>Explore trade-offs</li> <li>Understand patterns</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#common-scenarios","title":"Common Scenarios","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-debugging","title":"1. Debugging","text":"<pre><code>I'm getting [error]. Here's my code:\n[code snippet]\n\nWhat's causing this and how can I fix it?\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-optimization","title":"2. Optimization","text":"<pre><code>This code works but is slow:\n[code snippet]\n\nHow can I improve its performance?\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#3-refactoring","title":"3. Refactoring","text":"<pre><code>I need to refactor this code to:\n- Improve readability\n- Reduce complexity\n- Enhance maintainability\n- Follow best practices\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-multi-step-problem-solving","title":"1. Multi-step Problem Solving","text":"<pre><code>1. Break down problem\n2. Solve components\n3. Integrate solutions\n4. Optimize result\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-pattern-recognition","title":"2. Pattern Recognition","text":"<pre><code>1. Identify common patterns\n2. Apply known solutions\n3. Adapt to context\n4. Validate approach\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#tips-for-quality-results","title":"Tips for Quality Results","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#1-input-quality","title":"1. Input Quality","text":"<ul> <li>Clear requirements</li> <li>Complete context</li> <li>Specific constraints</li> <li>Example cases</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#2-output-validation","title":"2. Output Validation","text":"<ul> <li>Review generated code</li> <li>Test functionality</li> <li>Check edge cases</li> <li>Verify performance</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/CopilotChatPatterns/#3-iterative-improvement","title":"3. Iterative Improvement","text":"<ul> <li>Refine requests</li> <li>Build on responses</li> <li>Learn from feedback</li> <li>Document patterns</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/","title":"Different Prompting Techniques","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#overview","title":"Overview","text":"<p>This document explores various prompting techniques to achieve the same goal using different approaches. Understanding these techniques helps create more effective and versatile prompts.</p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#1-role-based-prompting","title":"1. Role-Based Prompting","text":"<p>Role-based prompting involves assigning a specific role to the AI to guide its responses based on the expertise of that role. <pre><code>You are an experienced DevOps engineer with expertise in AWS infrastructure. \nCreate a plan for migrating a monolithic application to a microservices architecture on AWS.\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#2-step-by-step-prompting","title":"2. Step-by-Step Prompting","text":"<p>Step-by-step prompting breaks down a task into sequential steps to ensure clarity and completeness in the response. <pre><code>I need to migrate a monolithic application to a microservices architecture on AWS.\n1. First, analyze the current monolithic application structure\n2. Then, identify components that can be separated into microservices\n3. Next, design the AWS infrastructure using appropriate services\n4. Finally, create a migration timeline with minimal downtime\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#3-use-case-context-task-prompting","title":"3. Use Case-Context-Task Prompting","text":"<p>This technique provides a clear use case, context, and task to guide the AI in generating a focused and relevant response. <pre><code>Use case: To create a migration plan for a monolithic application to microservices on AWS.\n\nContext: We have a monolithic Java application serving 10,000 users that has become difficult to maintain and scale.\n\nTask: Create a detailed migration plan that includes:\n- Application decomposition strategy\n- AWS services to utilize\n- Migration steps\n- Testing approach\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#4-input-output-format-specification","title":"4. Input-Output Format Specification","text":"<p>Input-output format specification defines the input details and expected output structure to ensure precise and structured responses. <pre><code>I need a migration plan for converting a monolithic application to microservices on AWS.\n\nInput:\n- Monolithic Java application\n- Currently hosted on-premises\n- 10,000 daily active users\n- Needs to maintain 99.9% uptime during migration\n\nOutput format:\n1. Executive Summary (3-4 sentences)\n2. Application Decomposition Strategy (bullet points)\n3. AWS Architecture Diagram (text description)\n4. Migration Timeline (weeks/phases)\n5. Risk Mitigation Steps (bullet points)\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#5-few-shot-prompting","title":"5. Few-Shot Prompting","text":"<p>Few-shot prompting provides examples to guide the AI in generating similar responses for new tasks. <pre><code>I need to create migration plans for different applications. Here are two examples:\n\nExample 1:\nApplication: E-commerce website\nMigration plan:\n- Separate product catalog, shopping cart, and payment processing into microservices\n- Use AWS ECS for containerization\n- Implement API Gateway for routing\n- Timeline: 3 months with phased approach\n\nExample 2:\nApplication: CRM system\nMigration plan:\n- Extract customer management, reporting, and notification components\n- Use AWS Lambda for serverless functions\n- Implement DynamoDB for flexible schema\n- Timeline: 4 months with parallel development\n\nNow, create a similar migration plan for a monolithic Java application with 10,000 users that needs to be migrated to AWS microservices.\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#6-chain-of-thought-prompting","title":"6. Chain-of-Thought Prompting","text":"<p>Chain-of-thought prompting encourages the AI to think through a problem step by step to arrive at a logical solution. <pre><code>I need to migrate a monolithic Java application to microservices on AWS. Let's think through this step by step.\n\nFirst, we need to understand the current architecture. A monolithic Java application typically has tightly coupled components like user management, business logic, and data access layers.\n\nNext, we should identify which components would make good microservices. Components with clear boundaries and independent functionality are good candidates.\n\nThen, we need to choose appropriate AWS services. For Java microservices, we might consider ECS, EKS, or perhaps even Lambda for certain functions.\n\nAfter that, we need to plan the data migration strategy, as moving from a monolithic database to separate data stores requires careful planning.\n\nFinally, we should develop a phased migration approach to minimize disruption.\n\nBased on this thinking, create a migration plan for this application.\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#7-negative-prompting","title":"7. Negative Prompting","text":"<p>Negative prompting specifies what the AI should avoid doing, helping to refine the response by eliminating undesired outcomes. <pre><code>Create a migration plan for moving a monolithic Java application to microservices on AWS. \nThe plan should NOT:\n- Suggest a \"big bang\" migration approach\n- Recommend moving everything to microservices without analysis\n- Ignore data migration challenges\n- Overlook the need for monitoring and observability\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/DifferentPromptingTechniques/#8-persona-based-prompting","title":"8. Persona-Based Prompting","text":"<p>Persona-based prompting tailors the response to a specific audience or persona, ensuring the output is relevant and understandable to them. <pre><code>I'm a technical project manager with limited AWS knowledge. My team needs to migrate our monolithic Java application to microservices on AWS. \n\nExplain the migration plan to me as if I need to present it to both technical team members and executive stakeholders. Use analogies where helpful and avoid unnecessary technical jargon.\n</code></pre></p>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/","title":"GitHub Copilot Best Practices","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-1-writing-effective-comments-for-github-copilot","title":"Prompt 1: Writing Effective Comments for GitHub Copilot","text":"<pre><code>Use Case: To help developers write comments that maximize GitHub Copilot's code generation capabilities.\n\nWrite comments that:\n1. Clearly state the function's purpose\n2. Define expected inputs and outputs\n3. Mention edge cases\n4. Include relevant algorithm details\n5. Use consistent formatting\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-2-structuring-code-for-better-github-copilot-suggestions","title":"Prompt 2: Structuring Code for Better GitHub Copilot Suggestions","text":"<pre><code>Use Case: To help developers structure their code in ways that get better suggestions from GitHub Copilot.\n\nTips for better GitHub Copilot suggestions:\n\n1. Start with clear variable and function names that use snake_case\n2. Add detailed JSDoc/docstring comments before functions\n3. Break complex logic into smaller, well-named functions\n4. Provide a few example implementations first, then let Copilot learn the pattern\n5. Include type information (TypeScript, JSDoc, Python type hints)\n6. Structure consistent code patterns across your codebase\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-3-getting-specific-implementations-from-github-copilot","title":"Prompt 3: Getting Specific Implementations from GitHub Copilot","text":"<pre><code>Use Case: To help developers get specifically tailored implementations from GitHub Copilot.\n\nTo get specific implementations:\n\n1. Be explicit about design patterns and approaches\n2. Specify language features to use or avoid\n3. Mention performance considerations\n4. Include expected input/output examples\n5. Reference specific libraries or frameworks\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-4-prompting-github-copilot-for-code-improvements","title":"Prompt 4: Prompting GitHub Copilot for Code Improvements","text":"<pre><code>Use Case: To help developers use GitHub Copilot to improve existing code.\n\nAsk Copilot to improve your code by:\n\n1. Specifying what aspects to improve (performance, readability, etc.)\n2. Mentioning specific techniques to apply\n3. Requesting before/after explanations\n4. Including constraints to maintain\n5. Explaining the expected outcomes of the improvements\n\nExample:\n\n```javascript\n/**\n * TODO: Refactor this function with GitHub Copilot to:\n * - Improve performance (current O(n\u00b2) complexity)\n * - Add proper error handling\n * - Use modern JavaScript features\n * - Implement pagination support\n * - Maintain the same function signature\n * \n * @param {Array} items - The items to filter and process\n * @param {Object} options - Processing options\n * @returns {Array} Processed results\n */\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-5-working-with-github-copilot-for-test-generation","title":"Prompt 5: Working with GitHub Copilot for Test Generation","text":"<pre><code>Use Case: To help developers effectively use GitHub Copilot to generate comprehensive tests.\n\nTips for getting better test suggestions:\n\n1. Clearly document the function to be tested first\n2. Specify testing framework and style\n3. Start with a few example test cases\n4. Include edge cases in your comments\n5. Request specific test coverage targets\n\nExample:\n\n```javascript\n/**\n * Write unit tests for the validateRegistrationInput function using Jest\n * \n * Test cases should include:\n * 1. Valid input validation\n * 2. Invalid username formats (too short, too long, invalid chars)\n * 3. Invalid email formats\n * 4. Password requirement failures\n * 5. Password mismatch\n * 6. Missing required fields\n * 7. Incorrect input types\n * \n * Each test should include an assertion and appropriate error message\n */\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#prompt-6-code-generation-patterns","title":"Prompt 6: Code Generation Patterns","text":"<pre><code>Use Case: To help developers efficiently generate code using GitHub Copilot.\n\nTips for generating specific types of code:\n\n1. Data Structure Generation\n```typescript\n/**\n * Define a data structure for:\n * Type: User Profile\n * Requirements:\n * - Unique identifier\n * - Personal information\n * - Contact details\n * - Account settings\n * Include: Type validation, default values, optional fields\n */\n</code></pre> <ol> <li> <p>Algorithm Implementation <pre><code>/**\n * Implement algorithm for:\n * Task: Sort a list of objects by multiple criteria\n * Input: Array of product objects with: name, price, rating\n * Output: Sorted array by primary and secondary keys\n * Consider: Performance, memory usage, readability\n */\nfunction sort_products(products: Product[], sort_keys: SortKey[]): Product[] {\n    // Copilot will suggest the implementation\n}\n</code></pre></p> </li> <li> <p>API Integration <pre><code>/**\n * Create API integration for:\n * Service: External payment processor\n * Operations needed:\n * - Process payment\n * - Refund transaction\n * - Check status\n * Include: Error handling, retry logic, timeout handling\n */\nclass PaymentService {\n    // Copilot will suggest the implementation\n}\n</code></pre></p> </li> <li> <p>Unit Test Generation <pre><code>/**\n * Generate unit tests for:\n * Function: validateUserInput(data: UserInput): ValidationResult\n * Test cases needed:\n * - Valid input data\n * - Missing required fields\n * - Invalid field formats\n * - Edge cases\n */\ndescribe('validateUserInput', () =&gt; {\n    // Copilot will suggest test cases\n});\n</code></pre></p> </li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#best-practices-for-code-generation","title":"Best Practices for Code Generation","text":"<ol> <li> <p>Clear Intent Communication <pre><code>Specify in comments:\n- Purpose of the code\n- Input/output formats\n- Important constraints\n- Performance requirements\n</code></pre></p> </li> <li> <p>Incremental Generation <pre><code>// 1. Start with interface/type definitions\ninterface DataProcessor {\n    // Core functionality\n}\n\n// 2. Add basic implementation\nclass BasicDataProcessor implements DataProcessor {\n    // Basic methods\n}\n\n// 3. Enhance with additional features\nclass AdvancedDataProcessor extends BasicDataProcessor {\n    // Advanced features\n}\n</code></pre></p> </li> <li> <p>Pattern Guidance <pre><code>/**\n * Guide the generation by specifying:\n * 1. Design pattern to use\n * 2. Error handling approach\n * 3. Logging requirements\n * 4. Performance constraints\n */\nclass FactoryExample {\n    // Factory pattern implementation...\n}\n</code></pre></p> </li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#common-generation-scenarios","title":"Common Generation Scenarios","text":"<ol> <li> <p>CRUD Operations <pre><code>/**\n * Generate CRUD operations for:\n * Entity: Product\n * Storage: SQL Database\n * Features:\n * - Validation\n * - Error handling\n * - Logging\n * - Transactions\n */\nclass ProductRepository {\n    // Copilot will suggest implementation\n}\n</code></pre></p> </li> <li> <p>Middleware Functions <pre><code>/**\n * Create middleware for:\n * Purpose: Authentication and Authorization\n * Requirements:\n * - Token validation\n * - Role checking\n * - Rate limiting\n * - Error handling\n */\nfunction auth_middleware(config: AuthConfig) {\n    // Copilot will suggest implementation\n}\n</code></pre></p> </li> <li> <p>Utility Functions <pre><code>/**\n * Generate utility functions for:\n * Category: Date manipulation\n * Functions needed:\n * - Format dates\n * - Calculate durations\n * - Handle timezones\n * - Parse date strings\n */\nclass DateUtils {\n    // Copilot will suggest implementation\n}\n</code></pre></p> </li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#generation-anti-patterns","title":"Generation Anti-patterns","text":"<ol> <li>Code Structure</li> <li>Avoid overly complex single prompts</li> <li>Don't mix multiple concerns</li> <li>Skip unnecessary details</li> <li> <p>Keep context focused</p> </li> <li> <p>Implementation Details</p> </li> <li>Don't over-specify implementation</li> <li>Allow flexibility in approach</li> <li>Focus on requirements</li> <li>Guide but don't constrain</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitHubCopilotSpecificTechniques/#feedback-loop","title":"Feedback Loop","text":"<ol> <li> <p>Review and Refine <pre><code>After generation:\n1. Review for correctness\n2. Check edge cases\n3. Verify error handling\n4. Test performance\n</code></pre></p> </li> <li> <p>Iterative Improvement <pre><code>For better results:\n1. Adjust prompts based on output\n2. Add missing context\n3. Clarify requirements\n4. Provide examples\n</code></pre></p> </li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/","title":"Git Integration Practices with GitHub Copilot","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#commit-message-generation","title":"Commit Message Generation","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-conventional-commits","title":"1. Conventional Commits","text":"<pre><code>Write a commit message following conventional commits format for these changes:\n[paste diff or describe changes]\n\nExpected format:\ntype(scope): description\n\n#Examples:\nfeat(auth): add OAuth2 authentication\nfix(api): handle null response from endpoint\ndocs(readme): update installation instructions\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-code-review-comments","title":"2. Code Review Comments","text":"<pre><code>Generate PR review comments for:\n- Potential issues\n- Style violations\n- Performance concerns\n- Security risks\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#branch-management","title":"Branch Management","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-branch-naming","title":"1. Branch Naming","text":"<pre><code>Generate branch name for:\n- Feature implementation\n- Bug fix\n- Documentation update\n- Performance improvement\n\nFormat: type/description-in-kebab-case\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-pr-descriptions","title":"2. PR Descriptions","text":"<pre><code>Write PR description including:\n- Changes overview\n- Breaking changes\n- Dependencies\n- Testing instructions\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#git-workflows","title":"Git Workflows","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-feature-development","title":"1. Feature Development","text":"<pre><code>1. Branch Creation\n   ```\n   git checkout -b feat/new-feature\n   ```\n\n2. Regular Commits\n   - Small, focused changes\n   - Clear commit messages\n   - Link to issues\n\n3. PR Creation\n   - Comprehensive description\n   - Review checklist\n   - Testing evidence\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-code-review-process","title":"2. Code Review Process","text":"<pre><code>1. Self-Review\n   - Run automated checks\n   - Update documentation\n   - Add test coverage\n\n2. Peer Review\n   - Address comments\n   - Update changes\n   - Request re-review\n\n3. Merge Preparation\n   - Resolve conflicts\n   - Squash commits\n   - Update changelog\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#best-practices","title":"Best Practices","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-commit-organization","title":"1. Commit Organization","text":"<ul> <li>Group related changes</li> <li>Separate refactoring</li> <li>Isolate formatting changes</li> <li>Split large changes</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-branch-strategy","title":"2. Branch Strategy","text":"<ul> <li>Short-lived feature branches</li> <li>Regular rebasing</li> <li>Clean merge history</li> <li>Protected main branch</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#3-review-workflow","title":"3. Review Workflow","text":"<ul> <li>Early feedback</li> <li>Incremental reviews</li> <li>Clear communications</li> <li>Tracked changes</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#copilot-specific-tips","title":"Copilot-Specific Tips","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-generated-code-management","title":"1. Generated Code Management","text":"<pre><code>1. Review generated code before commit\n2. Break large generations into smaller commits\n3. Document generation context\n4. Track manual modifications\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-documentation-updates","title":"2. Documentation Updates","text":"<pre><code>1. Update docs with generated changes\n2. Include generation prompts\n3. Document review decisions\n4. Maintain changelog\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#3-version-control-integration","title":"3. Version Control Integration","text":"<pre><code>1. Use .gitignore for Copilot files\n2. Track manual overrides\n3. Document configuration\n4. Manage settings\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#team-guidelines","title":"Team Guidelines","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#1-standard-practices","title":"1. Standard Practices","text":"<ul> <li>Consistent commit messages</li> <li>Branch naming conventions</li> <li>PR templates</li> <li>Review checklists</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#2-communication","title":"2. Communication","text":"<ul> <li>Clear PR descriptions</li> <li>Detailed review comments</li> <li>Context sharing</li> <li>Decision tracking</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/GitIntegrationPractices/#3-quality-assurance","title":"3. Quality Assurance","text":"<ul> <li>Automated checks</li> <li>Manual review</li> <li>Testing requirements</li> <li>Documentation updates</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/HowToWriteAGoodPrompt/","title":"How to Write a Good Prompt","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/HowToWriteAGoodPrompt/#guidelines-for-crafting-effective-prompts","title":"Guidelines for Crafting Effective Prompts","text":"<ol> <li>Be Clear and Specific:</li> <li>Clearly define the task or objective.</li> <li>Avoid ambiguous language.</li> </ol> <p>Example:    - Bad: \"Write a function.\"    - Good: \"Write a Python function to calculate the factorial of a number using recursion.\"</p> <ol> <li>Provide Context:</li> <li>Include relevant details to help the user or system understand the task.</li> </ol> <p>Example:    - Bad: \"Generate test cases.\"    - Good: \"Generate test cases for a login feature that includes username and password validation.\"</p> <ol> <li>Use Examples:</li> <li>Provide input-output examples to clarify expectations.</li> </ol> <p>Example:    - Input: \"5\"    - Output: \"120\"</p> <ol> <li>Be Concise:</li> <li>Avoid unnecessary details while ensuring completeness.</li> </ol> <p>Example:    - Bad: \"Write a function that does something with numbers.\"    - Good: \"Write a function to find the sum of an array of integers.\"</p> <ol> <li>Iterate and Refine:</li> <li>Test the prompt and refine it based on the results.</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/HowToWriteAGoodPrompt/#template-for-writing-prompts","title":"Template for Writing Prompts","text":"<pre><code>Intent: [Clearly state the purpose of the prompt.]\n\nContext: [Provide relevant details and background information.]\n\nTask: [Describe the task to be performed.]\n\nExample:\nInput: [Provide an example input.]\nOutput: [Provide the expected output.]\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/","title":"GitHub Copilot Features and Best Practices","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#overview","title":"Overview","text":"<p>This document provides comprehensive information about GitHub Copilot features that can enhance your development workflow and productivity. It includes best practices for working with Copilot and valuable resources for further learning.</p>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#github-copilot-features","title":"GitHub Copilot Features","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#core-capabilities","title":"Core Capabilities","text":"<ol> <li>Code Completion</li> <li>Real-time code suggestions as you type</li> <li>Complete functions and methods based on context</li> <li> <p>Generate boilerplate code automatically</p> </li> <li> <p>Natural Language to Code</p> </li> <li>Convert comments describing functionality into code</li> <li>Implement functions from their docstrings or descriptions</li> <li> <p>Create code from step-by-step explanations</p> </li> <li> <p>Context-Aware Assistance</p> </li> <li>Understands your project's context and coding patterns</li> <li>Adapts to your code style and naming conventions</li> <li>Suggests code based on surrounding functionality</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#ide-integrations","title":"IDE Integrations","text":"<ol> <li>Visual Studio Code</li> <li>Inline suggestions with Tab key acceptance</li> <li>Customizable settings for suggestion behavior</li> <li> <p>Integration with editor features like IntelliSense</p> </li> <li> <p>Visual Studio</p> </li> <li>Full-function suggestions in C#, C++, and more</li> <li>Works with existing Visual Studio features</li> <li> <p>Customizable through the Visual Studio options</p> </li> <li> <p>JetBrains IDEs</p> </li> <li>Support across the JetBrains suite (IntelliJ, PyCharm, etc.)</li> <li>Integration with existing code completion</li> <li>Keyboard shortcuts for accepting suggestions</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#advanced-features","title":"Advanced Features","text":"<ol> <li>GitHub Copilot Chat</li> <li>Natural language conversations about code</li> <li>Ask questions about your codebase</li> <li> <p>Get help with debugging and problem-solving</p> </li> <li> <p>Alternative Suggestions</p> </li> <li>View multiple options for code completion</li> <li>Cycle through different approaches to solving problems</li> <li> <p>Choose the most appropriate implementation</p> </li> <li> <p>Test Generation</p> </li> <li>Create unit tests from implementation code</li> <li>Generate test cases with appropriate inputs and assertions</li> <li>Help achieve better test coverage</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#best-practices-for-using-github-copilot","title":"Best Practices for Using GitHub Copilot","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#prompt-engineering","title":"Prompt Engineering","text":"<ol> <li>Be Specific in Comments</li> <li>Write clear, detailed comments that describe what you want</li> <li>Include expected inputs, outputs, and edge cases</li> <li> <p>Provide context and constraints when needed</p> </li> <li> <p>Use the Right Format</p> </li> <li>Structure comments in a way that guides Copilot</li> <li>Start with function signatures or type definitions</li> <li> <p>Include examples where helpful</p> </li> <li> <p>Iterate on Suggestions</p> </li> <li>Treat Copilot suggestions as a starting point</li> <li>Refine and edit generated code as needed</li> <li>Provide additional context if suggestions aren't relevant</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#code-quality","title":"Code Quality","text":"<ol> <li>Always Review Generated Code</li> <li>Verify that suggestions match your requirements</li> <li>Check for security vulnerabilities or bugs</li> <li> <p>Ensure code follows your project's standards</p> </li> <li> <p>Maintain Consistent Naming</p> </li> <li>Use underscore_for_field_names in languages that follow snake_case conventions</li> <li>Be consistent with your project's naming style</li> <li> <p>Edit suggestions to match your conventions</p> </li> <li> <p>Test Generated Code</p> </li> <li>Don't assume generated code works correctly</li> <li>Write tests for functionality from Copilot</li> <li>Validate edge cases and error handling</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#workflow-integration","title":"Workflow Integration","text":"<ol> <li>Start with Structure</li> <li>Begin with function signatures or class definitions</li> <li>Let Copilot fill in implementation details</li> <li> <p>Guide the process with comments and partial code</p> </li> <li> <p>Use for Repetitive Tasks</p> </li> <li>Leverage Copilot for boilerplate code</li> <li>Generate similar patterns across your codebase</li> <li> <p>Automate routine coding tasks</p> </li> <li> <p>Pair Programming Approach</p> </li> <li>Think of Copilot as a pair programming partner</li> <li>Engage in a dialogue through comments</li> <li>Provide feedback by accepting, rejecting, or modifying suggestions</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#resources-for-github-copilot","title":"Resources for GitHub Copilot","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#official-resources","title":"Official Resources","text":"<ul> <li>GitHub Copilot Documentation - Official guides and references</li> <li>GitHub Copilot for Individuals - Product information and subscription</li> <li>GitHub Copilot for Business - Enterprise features and management</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#learning-materials","title":"Learning Materials","text":"<ul> <li>GitHub Skills: Introduction to GitHub Copilot - Interactive course</li> <li>GitHub Blog: Copilot Articles - Latest news and features</li> <li>GitHub Materials Repository - Additional resources and examples</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub Copilot Discussions - Community Q&amp;A</li> <li>Stack Overflow: GitHub Copilot Tags - Problem-solving</li> <li>GitHub Feedback - Share feedback and suggestions</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#prompt-examples-for-github-copilot","title":"Prompt Examples for GitHub Copilot","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#function-implementation","title":"Function Implementation","text":"<pre><code># Function to calculate the moving average of a time series\n# Parameters:\n#   data: List of numerical values\n#   window_size: Number of points to include in the moving average\n# Returns:\n#   List of moving averages with the same length as data\ndef calculate_moving_average(data, window_size):\n    # Your cursor here will trigger Copilot suggestions\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#api-implementation","title":"API Implementation","text":"<pre><code>/**\n * Creates a REST API endpoint to retrieve user information\n * \n * @param {object} request - The HTTP request object containing:\n *   - params.user_id: The ID of the user to retrieve\n * @returns {object} User data including name, email, and preferences\n * @throws {Error} If user is not found or unauthorized\n */\nfunction get_user_info(request) {\n    // Your cursor here will trigger Copilot suggestions\n}\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#test-generation","title":"Test Generation","text":"<pre><code># Write tests for the following function:\ndef validate_email(email_address):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return bool(re.match(pattern, email_address))\n\n# Generate test cases covering valid and invalid emails\nimport unittest\n\nclass TestEmailValidation(unittest.TestCase):\n    # Your cursor here will trigger Copilot to generate tests\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#language-specific-guidelines","title":"Language-Specific Guidelines","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#python","title":"Python","text":"<ol> <li>Type Hints</li> <li>Use type hints to improve suggestions</li> <li>Include docstring parameters with types</li> <li>Use dataclasses for structured data</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#javascripttypescript","title":"JavaScript/TypeScript","text":"<ol> <li>JSDoc Comments</li> <li>Provide detailed JSDoc annotations</li> <li>Include parameter and return types</li> <li>Document exceptions and edge cases</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#java","title":"Java","text":"<ol> <li>Class Structure</li> <li>Document class hierarchy clearly</li> <li>Use descriptive method names</li> <li>Include JavaDoc comments</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#c","title":"C","text":"<ol> <li>XML Documentation</li> <li>Use XML doc comments</li> <li>Include example usage</li> <li>Document exceptions</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#vs-code-configuration-tips","title":"VS Code Configuration Tips","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#settings","title":"Settings","text":"<pre><code>{\n    \"github.copilot.enable\": {\n        \"*\": true,\n        \"plaintext\": false,\n        \"markdown\": false\n    },\n    \"github.copilot.inlineSuggest.enable\": true,\n    \"github.copilot.advanced\": {\n        \"length\": 500,\n        \"temperature\": 0.7\n    }\n}\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>Alt + [</code> or <code>Alt + ]</code>: Cycle through suggestions</li> <li><code>Tab</code>: Accept suggestion</li> <li><code>Esc</code>: Dismiss suggestion</li> <li><code>Ctrl + Enter</code>: Open Copilot completions panel</li> </ul>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<ol> <li>No Suggestions Appearing</li> <li>Check your internet connection</li> <li>Verify Copilot is enabled for the file type</li> <li> <p>Try restarting VS Code</p> </li> <li> <p>Poor Quality Suggestions</p> </li> <li>Add more context in comments</li> <li>Break down complex tasks</li> <li> <p>Use more specific function names</p> </li> <li> <p>Performance Issues</p> </li> <li>Reduce file size</li> <li>Close unused editors</li> <li>Adjust temperature settings</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#domain-specific-patterns","title":"Domain-Specific Patterns","text":""},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#web-development","title":"Web Development","text":"<pre><code>/**\n * RESTful API endpoint pattern\n * Include:\n * - HTTP method\n * - Route parameters\n * - Query parameters\n * - Request body structure\n * - Response format\n * - Error handling\n */\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#data-science","title":"Data Science","text":"<pre><code>\"\"\"\nML Model pattern\nInclude:\n- Input data format\n- Feature preprocessing\n- Model architecture\n- Training parameters\n- Evaluation metrics\n\"\"\"\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#devops","title":"DevOps","text":"<pre><code>\"\"\"\nInfrastructure as Code pattern\nInclude:\n- Resource requirements\n- Configuration parameters\n- Dependencies\n- Security considerations\n\"\"\"\n</code></pre>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#ai-pair-programming-etiquette","title":"AI Pair Programming Etiquette","text":"<ol> <li>Code Review Process</li> <li>Always review generated code</li> <li>Understand the implementation</li> <li>Test edge cases</li> <li> <p>Document modifications</p> </li> <li> <p>Iterative Refinement</p> </li> <li>Start with basic prompts</li> <li>Refine based on results</li> <li>Keep useful patterns</li> <li> <p>Share successful approaches</p> </li> <li> <p>Team Collaboration</p> </li> <li>Document successful prompts</li> <li>Share configuration settings</li> <li>Maintain prompt libraries</li> <li>Establish best practices</li> </ol>"},{"location":"BestPractices/PromptEngineeringBestPractices/IDESpecificFeaturesAndResources/#conclusion","title":"Conclusion","text":"<p>GitHub Copilot can significantly enhance your development workflow when used effectively. By following these best practices and leveraging the resources provided, you can maximize the benefits of this AI pair programmer while maintaining high-quality code standards.</p>"},{"location":"BestPractices/SecurityBestPractices/IdentifyingSecurityVulnerabilities/","title":"Identifying Security Vulnerabilities","text":""},{"location":"BestPractices/SecurityBestPractices/IdentifyingSecurityVulnerabilities/#prompt-1-security-code-review","title":"Prompt 1: Security Code Review","text":"<p><pre><code>Intent: To help developers identify security vulnerabilities in their code.\n\nContext: You are conducting a security review of code. The code details are as follows:\n\nCode_snippet: {code_snippet}\nProgramming_language: {programming_language}\nApplication_type: {application_type}\n\nGenerate a list of potential security vulnerabilities, including:\n- Injection vulnerabilities.\n- Authentication issues.\n- Data exposure risks.\n\nExample:\nCode_snippet:\n```php\n$username = $_POST['username'];\n$password = $_POST['password'];\n$query = \"SELECT * FROM users WHERE username='$username' AND password='$password'\";\n$result = mysqli_query($connection, $query);\nif(mysqli_num_rows($result) &gt; 0) {\n    $_SESSION['user'] = $username;\n    echo \"Login successful\";\n}\n</code></pre> Programming_language: \"PHP\" Application_type: \"Web Application\"</p> <p>Security Vulnerabilities: 1. SQL Injection: The code directly inserts user input into the SQL query without sanitization. 2. Plain Text Passwords: Passwords are stored and compared in plain text rather than being hashed. 3. Insufficient Authentication: No account lockout mechanism for failed login attempts. 4. Session Fixation: The session is not regenerated after successful login. 5. Information Disclosure: Error messages may reveal sensitive information about the database structure.</p> <p>Recommendations: 1. Use prepared statements or parameterized queries to prevent SQL injection. 2. Hash passwords using a strong algorithm like bcrypt. 3. Implement account lockout after multiple failed attempts. 4. Regenerate session IDs after login with session_regenerate_id(). 5. Use generic error messages that don't reveal system details. ```</p>"},{"location":"BestPractices/SecurityBestPractices/SecureConfigurations/","title":"Secure Configurations for GitHub Copilot","text":""},{"location":"BestPractices/SecurityBestPractices/SecureConfigurations/#prompt-1-creating-basic-secure-configuration-templates","title":"Prompt 1: Creating Basic Secure Configuration Templates","text":"<pre><code>Use Case: To help developers create secure configuration files using GitHub Copilot.\n\nPrompt: You are setting up security configurations for an application. The application details are as follows:\n\napplication_type: {application_type}\nenvironment: {environment}\n\nGenerate a basic secure configuration template, including:\n- Standard security headers\n- Basic authentication settings\n- Common security patterns\n</code></pre>"},{"location":"BestPractices/SecurityBestPractices/WritingSecureCode/","title":"Writing Secure Code","text":""},{"location":"BestPractices/SecurityBestPractices/WritingSecureCode/#prompt-1-implementing-authentication-securely","title":"Prompt 1: Implementing Authentication Securely","text":"<pre><code>Use Case: To help developers implement secure authentication mechanisms.\n\nPrompt: You are implementing authentication for an application. The application details are as follows:\n\nApplication_type: {application_type}\nAuthentication_requirements: {authentication_requirements}\n\nGenerate code for a secure authentication system, including:\n- Secure password handling.\n- Proper session management.\n- Protection against common attacks.\n</code></pre>"},{"location":"CodeOptimization/Efficiency/","title":"Code Optimization - Efficiency","text":""},{"location":"CodeOptimization/Efficiency/#prompt-1-optimize-algorithm-efficiency","title":"Prompt 1: Optimize Algorithm Efficiency","text":"<pre><code>You are optimizing an algorithm to improve its efficiency. The algorithm details are as follows:\n\nAlgorithm Description: {algorithm_description} #alogirithm description\n\nGenerate a list of optimizations, including:\n- Reducing time complexity\n- Reducing space complexity\n- Improving scalability\n</code></pre>"},{"location":"CodeOptimization/Efficiency/#prompt-2-measure-efficiency-gains","title":"Prompt 2: Measure Efficiency Gains","text":"<pre><code>You are measuring the efficiency gains of an optimized algorithm. The algorithm details are as follows:\n\nOriginal Algorithm: {original_algorithm}\nOptimized Algorithm: {optimized_algorithm}\n\nGenerate a comparison of the two algorithms, including:\n- Execution time\n- Memory usage\n- Scalability\n</code></pre>"},{"location":"CodeOptimization/PerformanceBottlenecks/","title":"Code Optimization - Performance Bottlenecks","text":""},{"location":"CodeOptimization/PerformanceBottlenecks/#prompt-1-identify-bottlenecks","title":"Prompt 1: Identify Bottlenecks","text":"<pre><code>You are analyzing a system for performance bottlenecks. Use the following details:\n\nSystem Description: {system_description}\nMetrics: {metrics}\n\nGenerate a list of potential bottlenecks and their causes. Include:\n- High CPU usage\n- Memory leaks\n- Slow database queries\n</code></pre>"},{"location":"CodeOptimization/PerformanceBottlenecks/#prompt-2-suggest-improvements","title":"Prompt 2: Suggest Improvements","text":"<pre><code>Based on the identified bottlenecks, suggest improvements to optimize performance. Include:\n- Code refactoring\n- Algorithm optimization\n- Hardware upgrades\n</code></pre>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/","title":"Performance Optimization Patterns with GitHub Copilot","text":""},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#prompt-1-implementing-performance-optimizations","title":"Prompt 1: Implementing Performance Optimizations","text":"<pre><code>Intent: To help developers implement performance optimizations using GitHub Copilot.\n\nContext: Guide the implementation of performance improvements:\n- Algorithm optimization\n- Resource management\n- Caching strategies\n- Load handling\n</code></pre>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#optimization-patterns","title":"Optimization Patterns","text":"<ol> <li> <p>Algorithmic Optimization</p> </li> <li> <p>Optimize algorithm for:</p> </li> <li>Task: Data processing pipeline</li> <li>Current complexity: O(n\u00b2)</li> <li>Target complexity: O(n log n)</li> <li>Constraints:</li> <li> <ul> <li>Memory usage</li> </ul> </li> <li> <ul> <li>Data consistency</li> </ul> </li> <li> <ul> <li>Error handling</li> </ul> </li> <li> <p>Resource Management</p> </li> <li> <p>Implement efficient resource handling:</p> </li> <li> <ul> <li>Memory pooling</li> </ul> </li> <li> <ul> <li>Connection management</li> </ul> </li> <li> <ul> <li>Batch processing</li> </ul> </li> <li> <ul> <li>Resource cleanup</li> </ul> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#performance-patterns","title":"Performance Patterns","text":"<ol> <li> <p>Caching Strategy <pre><code>/**\n * Implement multi-level caching:\n* - Memory cache\n * - Distributed cache\n * - Cache invalidation\n * - Cache warming\n */\n</code></pre></p> </li> <li> <p>Load Handling <pre><code>/**\n * Implement load management:\n * - Rate limiting\n * - Circuit breaking\n * - Load shedding\n * - Back pressure\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#data-structure-optimization","title":"Data Structure Optimization","text":"<ol> <li> <p>Collection Optimization <pre><code>/**\n * Optimize data structures for:\n * - Fast access patterns\n * - Memory efficiency\n * - Concurrent operations\n * - Bulk operations\n */\n</code></pre></p> </li> <li> <p>Memory Management <pre><code>/**\n * Implement memory-efficient handling:\n * - Object pooling\n * - Lazy loading\n * - Reference management\n * - Garbage collection hints\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#query-optimization","title":"Query Optimization","text":"<ol> <li> <p>Database Queries <pre><code>/**\n * Optimize database operations:\n * - Query planning\n * - Index usage\n * - Join optimization\n * - Batch operations\n */\n</code></pre></p> </li> <li> <p>Data Access Patterns <pre><code>/**\n * Implement efficient data access:\n * - Eager loading\n * - Pagination\n * - Streaming\n * - Partial loading\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#performance-monitoring","title":"Performance Monitoring","text":"<ol> <li> <p>Metrics Collection <pre><code>/**\n * Implement performance monitoring:\n * - Response times\n * - Resource usage\n * - Error rates\n * - System health\n */\n</code></pre></p> </li> <li> <p>Performance Analysis <pre><code>/**\n * Analyze performance data:\n * - Trend analysis\n * - Bottleneck detection\n * - Anomaly detection\n * - Capacity planning\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Code Organization <pre><code>/**\n * Structure code for performance:\n * - Modular design\n * - Efficient imports\n * - Code splitting\n * - Tree shaking\n */\n</code></pre></p> </li> <li> <p>Runtime Optimization <pre><code>/**\n * Optimize runtime behavior:\n * - Async operations\n * - Worker threads\n * - Memory management\n * - Event loop optimization\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#anti-patterns-to-avoid","title":"Anti-patterns to Avoid","text":"<ol> <li>Performance Issues</li> <li>Premature optimization</li> <li>Memory leaks</li> <li>N+1 queries</li> <li> <p>Blocking operations</p> </li> <li> <p>Resource Management</p> </li> <li>Unclosed resources</li> <li>Thread pool abuse</li> <li>Connection leaks</li> <li>Unbounded caches</li> </ol>"},{"location":"CodeOptimization/PerformanceOptimizationPatterns/#testing-performance","title":"Testing Performance","text":"<ol> <li> <p>Load Testing <pre><code>/**\n * Implement performance tests:\n * - Load scenarios\n * - Stress testing\n * - Endurance testing\n * - Capacity testing\n */\n</code></pre></p> </li> <li> <p>Benchmarking <pre><code>/**\n * Implement benchmarking:\n * - Operation timing\n * - Resource usage\n * - Comparative analysis\n * - Regression testing\n */\n</code></pre></p> </li> </ol>"},{"location":"CodeOptimization/Refactoring/","title":"Code Optimization - Refactoring","text":""},{"location":"CodeOptimization/Refactoring/#prompt-1-identify-code-smells","title":"Prompt 1: Identify Code Smells","text":"<pre><code>Use case: To help developers identify code smells during code reviews.\n\nPromp: You are reviewing a codebase for potential refactoring. The codebase details are as follows:\n\nCodebase_description: {codebase_description}\n\nGenerate a list of code smells, including:\n- Duplicated code\n- Long methods\n- High cyclomatic complexity\n\nKey points:\n1. Focus on identifying common code smells.\n2. Provide actionable suggestions for refactoring.\n3. Use standard tools and techniques for analysis.\n</code></pre>"},{"location":"CodeOptimization/Refactoring/#prompt-2-refactor-code","title":"Prompt 2: Refactor Code","text":"<pre><code>Use case: To help developers identify code smells during code reviews. \n\nPrompt:You are refactoring a piece of code to improve its readability and maintainability. The code snippet is as follows:\n\nCode Snippet: {code_snippet}\n\nGenerate the refactored code, including:\n- Improved variable naming\n- Modular functions\n- Reduced complexity\n</code></pre>"},{"location":"Designer/Deployment/","title":"Designer - Deployment Stage","text":""},{"location":"Designer/Deployment/#prompt-1-design-handoff","title":"Prompt 1: Design Handoff","text":"<pre><code>You are a designer preparing for the deployment of a new feature. The feature details are as follows:\n\nFeature Name: {feature_name}\nDesign Specifications: {design_specifications}\n\nGenerate a checklist for the design handoff, including:\n- Finalized design assets\n- Interaction guidelines\n- Accessibility compliance\n</code></pre>"},{"location":"Designer/Deployment/#prompt-2-deployment-support","title":"Prompt 2: Deployment Support","text":"<pre><code>You are supporting the deployment of a feature as a designer. The feature details are as follows:\n\nFeature Name: {feature_name}\nDeployment Issues: {deployment_issues}\n\nGenerate a plan to address deployment-related design issues, including:\n- Quick fixes\n- Long-term solutions\n- Communication with developers\n</code></pre>"},{"location":"Designer/Design/","title":"Design Implementation Guidelines","text":""},{"location":"Designer/Design/#prompt-1-creating-component-based-ui-structure","title":"Prompt 1: Creating Component-Based UI Structure","text":"<pre><code>Use Case: To help developers implement UI designs using GitHub Copilot.\n\nPrompt: You are implementing a UI design into code. The design details are as follows:\n\nui_framework: {ui_framework}\ncomponent_name: {component_name}\ncomponent_description: {component_description}\n\nGenerate component implementation code, including:\n- Component structure\n- Basic styling\n- State management\n- Event handlers\n</code></pre>"},{"location":"Designer/Development/","title":"Designer - Development Stage","text":""},{"location":"Designer/Development/#prompt-1-supporting-developers","title":"Prompt 1: Supporting Developers","text":"<pre><code>You are a designer supporting developers during the development stage. The feature details are as follows:\n\nFeature Name: {feature_name}\nDesign Specifications: {design_specifications}\n\nGenerate a list of clarifications or additional resources to support developers, including:\n- Design assets\n- Interaction guidelines\n- Accessibility considerations\n</code></pre>"},{"location":"Designer/Development/#prompt-2-design-adjustments","title":"Prompt 2: Design Adjustments","text":"<pre><code>You are making adjustments to a design based on development feedback. The feedback is as follows:\n\nFeedback: {feedback}\n\nGenerate an updated design plan, including:\n- Changes to the design\n- Justifications for the changes\n- Next steps for approval\n</code></pre>"},{"location":"Designer/Maintenance/","title":"Designer - Maintenance Stage","text":""},{"location":"Designer/Maintenance/#prompt-1-design-updates","title":"Prompt 1: Design Updates","text":"<pre><code>You are updating the design of a feature during the maintenance stage. The feature details are as follows:\n\nFeature Name: {feature_name}\nUser Feedback: {user_feedback}\n\nGenerate a plan for design updates, including:\n- Changes to the user interface\n- Improvements to the user experience\n- Accessibility enhancements\n</code></pre>"},{"location":"Designer/Maintenance/#prompt-2-monitoring-design-performance","title":"Prompt 2: Monitoring Design Performance","text":"<pre><code>You are monitoring the performance of a design during the maintenance stage. The feature details are as follows:\n\nFeature Name: {feature_name}\nPerformance Metrics: {performance_metrics}\n\nGenerate a report on design performance, including:\n- Key findings\n- Areas for improvement\n- Recommendations for future updates\n</code></pre>"},{"location":"Designer/Requirements/","title":"Designer - Requirements Stage","text":""},{"location":"Designer/Requirements/#prompt-1-gathering-design-requirements","title":"Prompt 1: Gathering Design Requirements","text":"<pre><code>You are a designer tasked with gathering design requirements for a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate a list of design requirements, including:\n- User interface elements\n- User experience considerations\n- Accessibility requirements\n</code></pre>"},{"location":"Designer/Requirements/#prompt-2-clarifying-design-ambiguities","title":"Prompt 2: Clarifying Design Ambiguities","text":"<pre><code>You are a designer reviewing the requirements document. Identify ambiguities or missing details in the following design requirement:\n\nRequirement: {requirement_text}\n\nGenerate a list of questions to clarify the design requirement.\n</code></pre>"},{"location":"Designer/Testing/","title":"Designer - Testing Stage","text":""},{"location":"Designer/Testing/#prompt-1-usability-testing","title":"Prompt 1: Usability Testing","text":"<pre><code>You are a designer conducting usability testing for a new feature. The feature details are as follows:\n\nFeature Name: {feature_name}\nTest Participants: {test_participants}\n\nGenerate a usability testing plan, including:\n- Test scenarios\n- Tasks for participants\n- Metrics to measure success\n</code></pre>"},{"location":"Designer/Testing/#prompt-2-reviewing-test-results","title":"Prompt 2: Reviewing Test Results","text":"<pre><code>You are reviewing the results of usability testing. The results are as follows:\n\nTest Results: {test_results}\n\nGenerate a summary of usability test results, including:\n- Key findings\n- Areas for improvement\n- Recommendations for design updates\n</code></pre>"},{"location":"DevOpsEngineer/CICDPipelineConfiguration/","title":"DevOps CI/CD Pipeline Configuration","text":""},{"location":"DevOpsEngineer/CICDPipelineConfiguration/#prompt-1-creating-basic-ci-pipeline-configuration","title":"Prompt 1: Creating Basic CI Pipeline Configuration","text":"<pre><code>Use Case: To help developers create CI pipeline configuration files using GitHub Copilot.\n\nPrompt: You are setting up a Continuous Integration pipeline for a project. The project details are as follows:\n\nproject_type: {project_type}\nprogramming_language: {programming_language}\ntesting_framework: {testing_framework}\n\nGenerate a CI pipeline configuration file for GitHub Actions, including:\n- Basic setup and triggers\n- Dependencies installation\n- Testing configuration\n- Simple reporting\n- Deployment steps (if applicable)\n</code></pre>"},{"location":"DevOpsEngineer/Deployment/","title":"DevOps Engineer - Deployment Stage","text":""},{"location":"DevOpsEngineer/Deployment/#prompt-1-deployment-plan","title":"Prompt 1: Deployment Plan","text":"<pre><code>You are a DevOps engineer tasked with creating a deployment plan for a new application. The application details are as follows:\n\nApplication Name: {application_name}\nEnvironment: {environment}\n\nGenerate a deployment plan, including:\n- Pre-deployment steps\n- Deployment steps\n- Post-deployment validation\n</code></pre>"},{"location":"DevOpsEngineer/Deployment/#prompt-2-rollback-strategy","title":"Prompt 2: Rollback Strategy","text":"<pre><code>You are creating a rollback strategy for the deployment of an application. Use the following details:\n\nApplication Name: {application_name}\nPotential Risks: {risks}\n\nGenerate a rollback strategy, including:\n- Conditions for rollback\n- Steps to revert changes\n- Validation after rollback\n</code></pre>"},{"location":"DevOpsEngineer/Design/","title":"DevOps Engineer - Design Stage","text":""},{"location":"DevOpsEngineer/Design/#prompt-1-infrastructure-design","title":"Prompt 1: Infrastructure Design","text":"<pre><code>You are a DevOps engineer designing the infrastructure for a new application. The application details are as follows:\n\nApplication Name: {application_name}\nExpected Traffic: {expected_traffic}\n\nGenerate an infrastructure design plan, including:\n- Server architecture\n- Network topology\n- Security measures\n</code></pre>"},{"location":"DevOpsEngineer/Design/#prompt-2-cicd-pipeline-design","title":"Prompt 2: CI/CD Pipeline Design","text":"<pre><code>You are designing a CI/CD pipeline for a project. The project details are as follows:\n\nProject Name: {project_name}\nDevelopment Workflow: {development_workflow}\n\nGenerate a CI/CD pipeline design, including:\n- Build stages\n- Testing stages\n- Deployment stages\n</code></pre>"},{"location":"DevOpsEngineer/Development/","title":"DevOps Engineer - Development Stage","text":""},{"location":"DevOpsEngineer/Development/#prompt-1-automation-scripts","title":"Prompt 1: Automation Scripts","text":"<pre><code>You are a DevOps engineer creating automation scripts for a project. The project details are as follows:\n\nProject Name: {project_name}\nAutomation Requirements: {automation_requirements}\n\nGenerate automation scripts, including:\n- Environment setup\n- Build automation\n- Deployment automation\n</code></pre>"},{"location":"DevOpsEngineer/Development/#prompt-2-collaboration-with-developers","title":"Prompt 2: Collaboration with Developers","text":"<pre><code>You are collaborating with developers during the development stage. The project details are as follows:\n\nProject Name: {project_name}\nDevelopment Challenges: {development_challenges}\n\nGenerate a plan to address development challenges, including:\n- Infrastructure support\n- CI/CD pipeline adjustments\n- Monitoring and logging setup\n</code></pre>"},{"location":"DevOpsEngineer/Maintenance/","title":"DevOps Engineer - Maintenance Stage","text":""},{"location":"DevOpsEngineer/Maintenance/#prompt-1-monitoring-and-alerts","title":"Prompt 1: Monitoring and Alerts","text":"<pre><code>You are setting up monitoring and alerts for an application during the maintenance stage. The application details are as follows:\n\nApplication Name: {application_name}\nMonitoring Requirements: {monitoring_requirements}\n\nGenerate a plan for monitoring and alerts, including:\n- Metrics to monitor\n- Alert thresholds\n- Notification channels\n</code></pre>"},{"location":"DevOpsEngineer/Maintenance/#prompt-2-incident-response","title":"Prompt 2: Incident Response","text":"<pre><code>You are responding to an incident in the production environment. The incident details are as follows:\n\nIncident Description: {incident_description}\n\nGenerate a step-by-step incident response plan, including:\n- Identifying the root cause\n- Mitigating the impact\n- Implementing a permanent fix\n</code></pre>"},{"location":"DevOpsEngineer/Maintenance/#prompt-3-optimizing-monitoring-dashboards","title":"Prompt 3: Optimizing Monitoring Dashboards","text":"<pre><code>Intent: To guide DevOps engineers in optimizing monitoring dashboards for better observability.\n\nContext: You are tasked with improving the monitoring dashboards for an application. The application details are as follows:\n\nApplication Name: {application_name}\nCurrent Metrics: {current_metrics}\n\nGenerate a plan to optimize the monitoring dashboards, ensuring:\n- Inclusion of key performance indicators (KPIs).\n- Clear visualization of critical metrics.\n- Alerts for threshold breaches.\n\nExample:\nMetric: CPU Usage\nVisualization: Line chart with a threshold line at 80%.\nAlert: Send an email notification if CPU usage exceeds 80% for 5 minutes.\n</code></pre>"},{"location":"DevOpsEngineer/Requirements/","title":"DevOps Engineer - Requirements Stage","text":""},{"location":"DevOpsEngineer/Requirements/#prompt-1-infrastructure-requirements","title":"Prompt 1: Infrastructure Requirements","text":"<pre><code>You are a DevOps engineer gathering infrastructure requirements for a new application. The application details are as follows:\n\nApplication Name: {application_name}\nExpected Traffic: {expected_traffic}\n\nGenerate a list of infrastructure requirements, including:\n- Server specifications\n- Network configurations\n- Security measures\n</code></pre>"},{"location":"DevOpsEngineer/Requirements/#prompt-2-cicd-pipeline-requirements","title":"Prompt 2: CI/CD Pipeline Requirements","text":"<pre><code>You are defining requirements for a CI/CD pipeline. The project details are as follows:\n\nProject Name: {project_name}\nDevelopment Workflow: {development_workflow}\n\nGenerate a list of CI/CD pipeline requirements, including:\n- Build steps\n- Testing stages\n- Deployment processes\n</code></pre>"},{"location":"DevOpsEngineer/Testing/","title":"DevOps Engineer - Testing Stage","text":""},{"location":"DevOpsEngineer/Testing/#prompt-1-infrastructure-testing","title":"Prompt 1: Infrastructure Testing","text":"<pre><code>You are a DevOps engineer testing the infrastructure for a new application. The infrastructure details are as follows:\n\nInfrastructure Description: {infrastructure_description}\n\nGenerate a checklist for infrastructure testing, including:\n- Load testing\n- Security testing\n- Failover testing\n</code></pre>"},{"location":"DevOpsEngineer/Testing/#prompt-2-cicd-pipeline-testing","title":"Prompt 2: CI/CD Pipeline Testing","text":"<pre><code>You are testing the CI/CD pipeline for a project. The pipeline details are as follows:\n\nPipeline Description: {pipeline_description}\n\nGenerate a list of test scenarios for the CI/CD pipeline, including:\n- Build validation\n- Automated test execution\n- Deployment verification\n</code></pre>"},{"location":"Developer/Deployment/","title":"Developer - Deployment Stage","text":""},{"location":"Developer/Deployment/#prompt-1-deployment-script","title":"Prompt 1: Deployment Script","text":"<pre><code>You are a developer tasked with creating a deployment script for a new application. The application details are as follows:\n\nApplication Name: {application_name}\nEnvironment: {environment}\n\nGenerate a deployment script, including:\n- Setting up the environment\n- Deploying the application\n- Verifying the deployment\n</code></pre>"},{"location":"Developer/Deployment/#prompt-2-deployment-troubleshooting","title":"Prompt 2: Deployment Troubleshooting","text":"<pre><code>You are troubleshooting a deployment issue. The issue details are as follows:\n\nIssue Description: {issue_description}\n\nGenerate a step-by-step plan to troubleshoot and resolve the deployment issue, including:\n- Identifying the root cause\n- Fixing the issue\n- Validating the fix\n</code></pre>"},{"location":"Developer/Design/","title":"Developer - Design Stage","text":""},{"location":"Developer/Design/#prompt-1-system-architecture","title":"Prompt 1: System Architecture","text":"<pre><code>You are a developer tasked with designing the system architecture for a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate a high-level system architecture diagram and describe the following:\n- Components involved\n- Data flow between components\n- Technologies to be used\n</code></pre>"},{"location":"Developer/Design/#prompt-2-api-design","title":"Prompt 2: API Design","text":"<pre><code>You are designing an API for the following functionality:\n\nFunctionality: {functionality_description}\n\nGenerate the API specifications, including:\n- Endpoint URL\n- HTTP method\n- Request parameters\n- Response format\n</code></pre>"},{"location":"Developer/Development/","title":"Developer - Development Stage","text":""},{"location":"Developer/Development/#prompt-1-writing-code","title":"Prompt 1: Writing Code","text":"<pre><code>You are a developer tasked with implementing a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate the code for the feature, ensuring:\n- Adherence to coding standards\n- Proper error handling\n- Unit tests for the code\n</code></pre>"},{"location":"Developer/Development/#prompt-2-code-review","title":"Prompt 2: Code Review","text":"<pre><code>You are reviewing the code for a new feature. The code is as follows:\n\nCode Snippet: {code_snippet}\n\nProvide feedback on the code, including:\n- Adherence to coding standards\n- Potential bugs or issues\n- Suggestions for improvement\n</code></pre>"},{"location":"Developer/Development/#prompt-3-writing-modular-code","title":"Prompt 3: Writing Modular Code","text":"<pre><code>Intent: To guide developers in writing modular and reusable code.\n\nContext: You are implementing a new feature that requires modular code for better maintainability and scalability. The feature details are as follows:\n\nFeature Name: {feature_name}\nFunctionality: {functionality_description}\n\nGenerate modular code for the feature, ensuring:\n- Each function performs a single task.\n- Functions are reusable and well-documented.\n- Adherence to coding standards.\n\nExample:\nInput: {input_example}\nOutput: {output_example}\n</code></pre>"},{"location":"Developer/Maintenance/","title":"Developer - Maintenance Stage","text":""},{"location":"Developer/Maintenance/#prompt-1-bug-fixing","title":"Prompt 1: Bug Fixing","text":"<pre><code>You are a developer tasked with fixing a bug in the application. The bug details are as follows:\n\nBug Description: {bug_description}\n\nGenerate a step-by-step plan to fix the bug, including:\n- Reproducing the bug\n- Identifying the root cause\n- Implementing the fix\n- Testing the fix\n</code></pre>"},{"location":"Developer/Maintenance/#prompt-2-code-refactoring","title":"Prompt 2: Code Refactoring","text":"<pre><code>You are refactoring a piece of code to improve its maintainability. The code snippet is as follows:\n\nCode Snippet: {code_snippet}\n\nGenerate the refactored code, ensuring:\n- Improved readability\n- Reduced complexity\n- Adherence to coding standards\n</code></pre>"},{"location":"Developer/Requirements/","title":"Developer - Requirements Stage","text":""},{"location":"Developer/Requirements/#prompt-1-gathering-requirements","title":"Prompt 1: Gathering Requirements","text":"<pre><code>You are a developer tasked with gathering technical requirements for a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate a list of technical requirements, including:\n- APIs to be developed\n- Database schema changes\n- Third-party integrations\n</code></pre>"},{"location":"Developer/Requirements/#prompt-2-clarifying-ambiguities","title":"Prompt 2: Clarifying Ambiguities","text":"<pre><code>You are a developer reviewing the requirements document. Identify ambiguities or missing details in the following requirement:\n\nRequirement: {requirement_text}\n\nGenerate a list of questions to clarify the requirement.\n</code></pre>"},{"location":"Developer/Testing/","title":"Developer - Testing Stage","text":""},{"location":"Developer/Testing/#prompt-1-writing-unit-tests","title":"Prompt 1: Writing Unit Tests","text":"<pre><code>You are a developer tasked with writing unit tests for a new feature. The feature details are as follows:\n\nFeature Description: {feature_description}\n\nGenerate unit tests in Python using the unittest framework. Ensure the tests cover:\n- Edge cases\n- Typical scenarios\n- Error handling\n</code></pre>"},{"location":"Developer/Testing/#prompt-2-debugging-test-failures","title":"Prompt 2: Debugging Test Failures","text":"<pre><code>You are debugging test failures for a feature. The test results are as follows:\n\nTest Results: {test_results}\n\nGenerate a step-by-step plan to debug and fix the test failures, including:\n- Identifying the root cause\n- Fixing the code\n- Re-running the tests\n</code></pre>"},{"location":"DocumentationPrompts/DocumentingCodeWithInlineComments/","title":"Documenting Code with Inline Comments","text":""},{"location":"DocumentationPrompts/DocumentingCodeWithInlineComments/#prompt-1-writing-effective-code-comments","title":"Prompt 1: Writing Effective Code Comments","text":"<p>Use Case: To help developers write clear and helpful inline comments in their code.</p> <p>Prompt: You are adding comments to a code file to improve its readability and maintainability. The code details are as follows:</p> <p>Code_snippet: {code_snippet} Programming_language: {programming_language}</p> <p>Generate inline comments for the code, including: - Function/method purpose comments. - Complex logic explanations. - Important variable descriptions.</p>"},{"location":"DocumentationPrompts/GeneratingREADME/","title":"Generating README Templates","text":""},{"location":"DocumentationPrompts/GeneratingREADME/#prompt-1-creating-project-readme","title":"Prompt 1: Creating Project README","text":"<pre><code>Use Case: To help developers create comprehensive README files for their projects.\n\nPrompt: You are creating a README file for a new project. The project details are as follows:\n\nProject_name: {project_name}\nProject_description: {project_description}\nTechnologies_used: {technologies_used}\n\nGenerate a README template, including:\n- Project title and description.\n- Installation and setup instructions.\n- Usage examples and documentation.\n\n\n\n## Usage\n```python\nfrom weather_client import WeatherClient\n\nclient = WeatherClient(api_key=\"your_api_key\")\nweather = client.get_current_weather(city=\"New York\")\nprint(f\"Temperature: {weather.temperature}\u00b0C\")\n</code></pre>"},{"location":"DocumentationPrompts/GeneratingREADME/#development","title":"Development","text":"<ol> <li>Clone the repository</li> <li>Install dependencies: <code>pip install -r requirements.txt</code></li> <li>Run tests: <code>pytest</code></li> </ol>"},{"location":"DocumentationPrompts/GeneratingREADME/#license","title":"License","text":"<p>MIT </p>"},{"location":"DocumentationPrompts/WritingAPIDocumentation/","title":"Writing API Documentation with GitHub Copilot","text":""},{"location":"DocumentationPrompts/WritingAPIDocumentation/#prompt-1-generating-comprehensive-api-documentation","title":"Prompt 1: Generating Comprehensive API Documentation","text":"<pre><code>Use Case: To help developers create clear, comprehensive API documentation for endpoints using GitHub Copilot.\n\nPrompt: You need to document an API endpoint. The endpoint details are as follows:\n\nendpoint_name: {endpoint_name}\nhttp_method: {http_method}\nendpoint_url: {endpoint_url}\ndescription: {description}\nrequest_parameters: {request_parameters}\nresponse_structure: {response_structure}\nauthentication_required: {authentication_required}\nerror_responses: {error_responses}\n\nGenerate comprehensive API documentation including:\n- Endpoint overview\n- Request format with example\n- Response format with example\n- Error codes and handling\n- Usage notes/limitations\n</code></pre>"},{"location":"LearningResources/ExplainingComplexCodeSnippets/","title":"Explaining Complex Code Snippets","text":""},{"location":"LearningResources/ExplainingComplexCodeSnippets/#prompt-1-breaking-down-complex-code","title":"Prompt 1: Breaking Down Complex Code","text":"<pre><code>Use Case: To help developers explain complex code snippets in a clear and understandable way.\n\nPrompt: You are explaining a complex code snippet to a team member. The code details are as follows:\n\nCode_snippet: {code_snippet}\nProgramming_language: {programming_language}\n\nGenerate an explanation of the code, including:\n- Overall purpose of the code.\n- Breakdown of complex parts.\n- Line-by-line explanation of critical sections.\n</code></pre>"},{"location":"LearningResources/GeneratingTutorials/","title":"Generating Tutorials","text":""},{"location":"LearningResources/GeneratingTutorials/#prompt-1-creating-technical-tutorials","title":"Prompt 1: Creating Technical Tutorials","text":"<pre><code>Use Case: To help developers create tutorials for technical topics.\n\nPrompt: You are creating a tutorial for a new technology. The details are as follows:\n\nTechnology_name: {technology_name}\nTarget_audience: {target_audience}\n\nGenerate a tutorial outline, including:\n- Introduction to the technology.\n- Step-by-step instructions.\n- Code examples and explanations.\n- Best practices and tips.\n</code></pre>"},{"location":"LearningResources/OnboardingNewTeamMembers/","title":"Onboarding New Team Members","text":""},{"location":"LearningResources/OnboardingNewTeamMembers/#prompt-1-creating-onboarding-guides","title":"Prompt 1: Creating Onboarding Guides","text":"<pre><code>Use Case: To help developers create onboarding guides for new team members.\n\nPrompt: You are onboarding a new developer to your project. The project details are as follows:\n\nProject Name: {project_name}\nTechnologies Used: {technologies_used}\n\nGenerate an onboarding guide, including:\n- Overview of the project.\n- Key technologies and tools.\n- Steps to set up the development environment.\n\nExample:\nProject Name: \"E-commerce Platform\"\nTechnologies Used: Python, Django, React\nGuide:\n1. Overview: The project is an e-commerce platform for selling products online.\n2. Technologies: Backend - Python/Django, Frontend - React.\n3. Setup:\n   - Clone the repository.\n   - Install dependencies using `pip install -r requirements.txt`.\n   - Run the development server using `python manage.py runserver`.\n</code></pre>"},{"location":"ProductManager/Deployment/","title":"Product Manager - Deployment Stage","text":""},{"location":"ProductManager/Deployment/#prompt-1-deployment-readiness","title":"Prompt 1: Deployment Readiness","text":"<pre><code>You are a product manager ensuring deployment readiness for a new feature. The feature details are as follows:\n\nFeature Name: {feature_name}\nDeployment Date: {deployment_date}\n\nGenerate a checklist for deployment readiness, including:\n- Stakeholder approvals\n- Documentation updates\n- Communication plans\n</code></pre>"},{"location":"ProductManager/Deployment/#prompt-2-post-deployment-feedback","title":"Prompt 2: Post-Deployment Feedback","text":"<pre><code>You are gathering feedback after the deployment of a new feature. The feature details are as follows:\n\nFeature Name: {feature_name}\nDeployment Feedback: {feedback}\n\nGenerate a summary of post-deployment feedback, including:\n- Successes\n- Challenges\n- Areas for improvement\n</code></pre>"},{"location":"ProductManager/Design/","title":"Product Manager - Design Stage","text":""},{"location":"ProductManager/Design/#prompt-1-design-feedback","title":"Prompt 1: Design Feedback","text":"<pre><code>You are a product manager reviewing the design for a new feature. The design is described as follows:\n\nDesign Description: {design_image}\n\nProvide feedback on the design, including:\n- Alignment with business goals\n- Usability considerations\n- Potential risks or challenges\n</code></pre>"},{"location":"ProductManager/Design/#prompt-2-design-approval","title":"Prompt 2: Design Approval","text":"<pre><code>You are approving the design for a new feature. The design details are as follows:\n\nDesign Description: {design_image}\n\nGenerate a checklist for design approval, including:\n- Alignment with requirements\n- Feasibility of implementation\n- Stakeholder buy-in\n</code></pre>"},{"location":"ProductManager/Requirements/","title":"Product Manager - Requirements Stage","text":""},{"location":"ProductManager/Requirements/#prompt-1-user-stories","title":"Prompt 1: User Stories","text":"<pre><code>You are a product manager gathering requirements for a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate a list of user stories in the format:\n- As a {user_role}, I want to {action} so that {benefit}.\nEnsure the user stories are clear, concise, and cover all aspects of the feature.\n</code></pre>"},{"location":"ProductManager/Requirements/#prompt-2-prioritization","title":"Prompt 2: Prioritization","text":"<pre><code>You are prioritizing requirements for the following feature:\n\nFeature Description: {feature_description}\n\nGenerate a priority list of requirements based on:\n- Business value\n- Technical complexity\n- Dependencies\n</code></pre>"},{"location":"ProductManager/Testing/","title":"Product Manager - Testing Stage","text":""},{"location":"ProductManager/Testing/#prompt-1-reviewing-test-results","title":"Prompt 1: Reviewing Test Results","text":"<pre><code>You are a product manager reviewing the test results for a new feature. The test results are as follows:\n\nFeature Name: {feature_name}\nTest Results: {test_results}\n\nProvide feedback on the test results, including:\n- Approval or rejection of the feature\n- Additional test scenarios to consider\n- Concerns or risks identified\n</code></pre>"},{"location":"ProductManager/Testing/#prompt-2-user-acceptance-testing-uat","title":"Prompt 2: User Acceptance Testing (UAT)","text":"<pre><code>You are overseeing user acceptance testing for a new feature. The feature details are as follows:\n\nFeature Name: {feature_name}\nTest Scenarios: {test_scenarios}\n\nGenerate a summary of UAT feedback, including:\n- Usability issues\n- Functional gaps\n- Suggestions for improvement\n</code></pre>"},{"location":"StoredProcedures/Creating/","title":"Stored Procedures - Creating","text":""},{"location":"StoredProcedures/Creating/#prompt-1-create-a-new-stored-procedure","title":"Prompt 1: Create a New Stored Procedure","text":"<pre><code>You are tasked with creating a new stored procedure in a SQL database. The procedure should perform the following task:\n\nTask Description: {task_description}\n\nGenerate the SQL code for the stored procedure, including:\n- Input parameters\n- SQL logic\n- Output or return values\n</code></pre>"},{"location":"StoredProcedures/Creating/#prompt-2-validate-a-stored-procedure","title":"Prompt 2: Validate a Stored Procedure","text":"<pre><code>You are validating a stored procedure for correctness and performance. The procedure details are as follows:\n\nProcedure Name: {procedure_name}\nExpected Behavior: {expected_behavior}\n\nGenerate a checklist to validate the stored procedure, including:\n- Syntax correctness\n- Performance metrics\n- Edge case handling\n</code></pre>"},{"location":"StoredProcedures/Debugging/","title":"Stored Procedures - Debugging","text":""},{"location":"StoredProcedures/Debugging/#prompt-1-debugging-a-stored-procedure","title":"Prompt 1: Debugging a Stored Procedure","text":"<pre><code>You are debugging a stored procedure in a SQL database. The procedure details are as follows:\n\nProcedure Name: {procedure_name}\nIssue Description: {issue_description}\n\nGenerate a step-by-step plan to debug the stored procedure, including:\n- Identifying the root cause\n- Testing the procedure with different inputs\n- Fixing the issue\n</code></pre>"},{"location":"StoredProcedures/Debugging/#prompt-2-logging-and-monitoring","title":"Prompt 2: Logging and Monitoring","text":"<pre><code>You are adding logging and monitoring to a stored procedure to aid in debugging. The procedure details are as follows:\n\nProcedure Name: {procedure_name}\n\nGenerate the SQL code to add logging and monitoring, including:\n- Logging input parameters\n- Capturing execution time\n- Recording errors\n</code></pre>"},{"location":"StoredProcedures/Optimizing/","title":"Optimizing Stored Procedures for GitHub Copilot","text":""},{"location":"StoredProcedures/Optimizing/#prompt-1-basic-sql-stored-procedure-optimization","title":"Prompt 1: Basic SQL Stored Procedure Optimization","text":"<pre><code>Use Case: To help developers optimize simple SQL stored procedures using GitHub Copilot.\n\nPrompt: You have a SQL stored procedure that needs optimization. The procedure details are as follows:\n\ndatabase_type: {database_type}\nprocedure_purpose: {procedure_purpose}\nperformance_issue: {performance_issue}\n\n\nFirst identify the performance issues in the stored procedure, including:\n- Long-running queries  \n- Inefficient joins\n- Missing indexes\n\nand give a query to identify the performance issues.\n\nThen, generate a basic optimized version of the stored procedure focusing on:\nGenerate a basic optimized version of the stored procedure focusing on:\n- Index usage\n- Query structure\n- Simple performance improvements\n- Standard SQL patterns\n</code></pre>"},{"location":"Testing/Tester/Deployment/","title":"Tester - Deployment Stage","text":""},{"location":"Testing/Tester/Deployment/#prompt-1-deployment-validation","title":"Prompt 1: Deployment Validation","text":"<pre><code>You are a tester validating the deployment of a new application. The deployment details are as follows:\n\nApplication Name: {application_name}\nEnvironment: {environment}\n\nGenerate a checklist for deployment validation, including:\n- Verifying application functionality\n- Checking environment configurations\n- Validating logs for errors\n</code></pre>"},{"location":"Testing/Tester/Deployment/#prompt-2-post-deployment-testing","title":"Prompt 2: Post-Deployment Testing","text":"<pre><code>You are performing post-deployment testing for a new application. The application details are as follows:\n\nApplication Name: {application_name}\n\nGenerate a list of test scenarios for post-deployment testing, including:\n- Smoke tests\n- Regression tests\n- Performance tests\n</code></pre>"},{"location":"Testing/Tester/Design/","title":"Tester - Design Stage","text":""},{"location":"Testing/Tester/Design/#prompt-1-test-design-review","title":"Prompt 1: Test Design Review","text":"<pre><code>You are a tester reviewing the design document for a new feature. The design is described as follows:\n\nDesign Description: {design_description}\n\nGenerate a list of potential test scenarios based on the design, including:\n- Functional tests\n- Integration tests\n- Edge cases\n</code></pre>"},{"location":"Testing/Tester/Design/#prompt-2-testability-assessment","title":"Prompt 2: Testability Assessment","text":"<pre><code>You are assessing the testability of a design. The design details are as follows:\n\nDesign Description: {design_description}\n\nProvide feedback on the testability of the design, including:\n- Areas that may be difficult to test\n- Suggestions to improve testability\n</code></pre>"},{"location":"Testing/Tester/Development/","title":"Tester - Development Stage","text":""},{"location":"Testing/Tester/Development/#prompt-1-collaborating-with-developers","title":"Prompt 1: Collaborating with Developers","text":"<pre><code>You are a tester collaborating with developers during the development stage. The feature details are as follows:\n\nFeature Description: {feature_description}\n\nGenerate a list of questions or concerns to discuss with developers, including:\n- Potential test scenarios\n- Edge cases to consider\n- Dependencies or blockers\n</code></pre>"},{"location":"Testing/Tester/Development/#prompt-2-early-test-planning","title":"Prompt 2: Early Test Planning","text":"<pre><code>You are planning tests early in the development stage. The feature details are as follows:\n\nFeature Description: {feature_description}\n\nGenerate a test plan, including:\n- Test objectives\n- Test scenarios\n- Tools and resources needed\n</code></pre>"},{"location":"Testing/Tester/Maintenance/","title":"Tester - Maintenance Stage","text":""},{"location":"Testing/Tester/Maintenance/#prompt-1-regression-testing","title":"Prompt 1: Regression Testing","text":"<pre><code>You are a tester performing regression testing after a maintenance update. The update details are as follows:\n\nUpdate Description: {update_description}\n\nGenerate a list of regression test scenarios, including:\n- Critical functionality tests\n- Edge case tests\n- Integration tests\n</code></pre>"},{"location":"Testing/Tester/Maintenance/#prompt-2-issue-verification","title":"Prompt 2: Issue Verification","text":"<pre><code>You are verifying the resolution of an issue after a maintenance update. The issue details are as follows:\n\nIssue Description: {issue_description}\n\nGenerate a checklist to verify the issue resolution, including:\n- Steps to reproduce the issue\n- Expected behavior\n- Validation steps\n</code></pre>"},{"location":"Testing/Tester/Requirements/","title":"Tester - Requirements Stage","text":""},{"location":"Testing/Tester/Requirements/#prompt-1-test-scenarios-from-requirements","title":"Prompt 1: Test Scenarios from Requirements","text":"<pre><code>You are a tester reviewing the requirements document for a new feature. The feature is described as follows:\n\nFeature Description: {feature_description}\n\nGenerate a list of test scenarios to validate the feature. Ensure the scenarios cover:\n- Functional requirements\n- Non-functional requirements\n- Edge cases\n</code></pre>"},{"location":"Testing/Tester/Requirements/#prompt-2-ambiguity-detection","title":"Prompt 2: Ambiguity Detection","text":"<pre><code>You are a tester analyzing the requirements document. Identify ambiguities or missing details in the following requirement:\n\nRequirement: {requirement_text}\n\nGenerate a list of questions to clarify the requirement.\n</code></pre>"},{"location":"Testing/Tester/Testing/","title":"Tester - Testing Stage","text":""},{"location":"Testing/Tester/Testing/#prompt-1-automation-test-cases","title":"Prompt 1: Automation Test Cases","text":"<pre><code>You are a tester responsible for creating automation test cases for the following feature:\n\nFeature Name: {feature_name}\nTest Scenarios: {test_scenarios}\n\nGenerate a table of test cases in the following format:\n- Test Case ID\n- Test Scenario\n- Steps to Execute\n- Expected Result\n- Actual Result (to be filled later)\n- Status (Pass/Fail, to be filled later)\n</code></pre>"},{"location":"Testing/Tester/Testing/#prompt-2-manual-test-cases","title":"Prompt 2: Manual Test Cases","text":"<pre><code>You are a tester creating manual test cases for a feature. Use the following details:\n\nFeature Name: {feature_name}\nTest Scenarios: {test_scenarios}\n\nGenerate a list of manual test cases with detailed steps and expected results.\n</code></pre>"},{"location":"Testing/Tester/Testing/#prompt-3-creating-comprehensive-test-scenarios","title":"Prompt 3: Creating Comprehensive Test Scenarios","text":"<pre><code>Intent: To help testers create comprehensive test scenarios for a feature.\n\nContext: You are testing a feature with the following details:\n\nFeature Name: {feature_name}\nRequirements: {requirements}\n\nGenerate a list of test scenarios, ensuring:\n- Coverage of functional and non-functional requirements.\n- Inclusion of edge cases and negative scenarios.\n- Alignment with user expectations.\n\nExample:\nTest Scenario: Verify login functionality with valid credentials.\nSteps:\n1. Navigate to the login page.\n2. Enter valid username and password.\n3. Click the login button.\nExpected Result: User is redirected to the dashboard.\n</code></pre>"},{"location":"Testing/TestingEnhancements/AutomationManualTestCases/","title":"Testing Enhancements - Automation and Manual Test Cases","text":""},{"location":"Testing/TestingEnhancements/AutomationManualTestCases/#prompt-1-automation-test-cases","title":"Prompt 1: Automation Test Cases","text":"<pre><code>You are tasked with creating automation test cases for the following feature:\n\nFeature Name: {feature_name}\nTest Scenarios: {test_scenarios}\n\nGenerate a table of test cases in the following format:\n- Test Case ID\n- Test Scenario\n- Steps to Execute\n- Expected Result\n- Actual Result (to be filled later)\n- Status (Pass/Fail, to be filled later)\n</code></pre>"},{"location":"Testing/TestingEnhancements/AutomationManualTestCases/#prompt-2-manual-test-cases","title":"Prompt 2: Manual Test Cases","text":"<pre><code>You are tasked with creating manual test cases for a feature. Use the following details:\n\nFeature Name: {feature_name}\nTest Scenarios: {test_scenarios}\n\nGenerate a list of manual test cases with detailed steps and expected results.\n</code></pre>"},{"location":"Testing/TestingEnhancements/UnitTestCases/","title":"Unit Test Cases with GitHub Copilot","text":""},{"location":"Testing/TestingEnhancements/UnitTestCases/#prompt-1-basic-unit-test-generation","title":"Prompt 1: Basic Unit Test Generation","text":"<pre><code>Use Case: To help developers create unit tests for their code using GitHub Copilot.\n\nPrompt: You have a function/method that needs unit tests. The function details are as follows:\n\nprogramming_language: {programming_language}\nfunction_name: {function_name}\nfunction_purpose: {function_purpose}\nimplementation: {implementation}\n\nGenerate unit tests for the function focusing on:\n- Basic test cases covering typical scenarios\n- Edge cases and boundary conditions\n- Error handling tests\n- Clear test names and documentation\n</code></pre>"},{"location":"Testing/TestingEnhancements/UnitTestCases/#prompt-2-testing-patterns-with-github-copilot","title":"Prompt 2: Testing Patterns with GitHub Copilot","text":""},{"location":"Testing/TestingEnhancements/UnitTestCases/#testing-strategy-template","title":"Testing Strategy Template","text":"<pre><code>Intent: To help developers create comprehensive testing strategies using GitHub Copilot.\n\nContext: You are developing a testing strategy for a component. Provide:\n- Testing pyramid structure\n- Test categorization\n- Coverage goals\n- Automation approach\n\nExample:\ncomponent_type: \"REST API Service\"\ntest_requirements: {\n  \"unit_coverage\": \"90%\",\n  \"integration_coverage\": \"80%\",\n  \"e2e_coverage\": \"critical paths\"\n}\n</code></pre>"},{"location":"Testing/TestingEnhancements/UnitTestCases/#testing-anti-patterns-to-avoid","title":"Testing Anti-patterns to Avoid","text":"<ol> <li>Test Structure</li> <li>Avoid testing implementation details</li> <li>Don't create brittle tests</li> <li>Prevent test interdependence</li> <li> <p>Skip redundant test cases</p> </li> <li> <p>Test Maintenance</p> </li> <li>Don't duplicate test code</li> <li>Avoid hardcoded test data</li> <li>Don't ignore failed tests</li> <li>Keep tests focused and clear</li> </ol>"},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/","title":"Debugging Runtime Errors with GitHub Copilot","text":""},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/#prompt-1-troubleshooting-common-runtime-errors","title":"Prompt 1: Troubleshooting Common Runtime Errors","text":"<pre><code>Intent: To help developers debug runtime errors using GitHub Copilot.\n\nPrompt:\n  Youare debugging a runtime error in your code. The error details are as follows #error_type: {error_type}\n  error_type: \"TypeError\"\nexecution_environment: {execution_environment}\n\nAnalyze the error and provide:\n- Explanation of the error\n- Potential causes\n- Code fixes with clear explanations\n- Prevention tips\n</code></pre>"},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/#prompt-2-debugging-patterns-with-github-copilot","title":"Prompt 2: Debugging Patterns with GitHub Copilot","text":""},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/#debugging-strategy-template","title":"Debugging Strategy Template","text":"<pre><code>Intent: To guide systematic debugging using GitHub Copilot.\n\nPrompt: You are debugging an issue in your code. Describe:\n- Error symptoms\n- Reproduction steps\n- Environment details\n- Recent changes\n\nExample debugging flow:\nerror_type: \"Runtime Exception\"\nsymptoms: \"Application crashes when processing large files\"\nenvironment: \"Production server\"\nrecent_changes: \"Added parallel processing feature\"\n</code></pre>"},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/#debugging-best-practices","title":"Debugging Best Practices","text":"<ol> <li>Systematic Approach</li> <li>Gather all relevant information</li> <li>Form and test hypotheses</li> <li>Document findings</li> <li> <p>Verify fixes</p> </li> <li> <p>Tool Integration</p> </li> <li>Use debugging tools effectively</li> <li>Integrate logging systems</li> <li>Monitor system metrics</li> <li> <p>Track error patterns</p> </li> <li> <p>Prevention Strategies</p> </li> <li>Add validation checks</li> <li>Implement monitoring</li> <li>Use type safety</li> <li>Handle edge cases</li> </ol>"},{"location":"TroubleshootingPrompts/DebuggingRuntimeErrors/#anti-patterns-to-avoid","title":"Anti-patterns to Avoid","text":"<ol> <li>Debugging Pitfalls</li> <li>Console.log debugging in production</li> <li>Incomplete error handling</li> <li>Ignoring error patterns</li> <li> <p>Missing root cause analysis</p> </li> <li> <p>Process Issues</p> </li> <li>No reproduction steps</li> <li>Incomplete documentation</li> <li>Untested fixes</li> <li>Ignored warning signs</li> </ol>"},{"location":"TroubleshootingPrompts/ErrorHandlingPatterns/","title":"Error Handling Patterns with GitHub Copilot","text":""},{"location":"TroubleshootingPrompts/ErrorHandlingPatterns/#prompt-1-implementing-robust-error-handling","title":"Prompt 1: Implementing Robust Error Handling","text":"<pre><code>Use Case: To help developers implement comprehensive error handling using GitHub Copilot.\n\nPrompt: Provide clear guidance for error handling implementation:\n- Error types and hierarchies\n- Recovery strategies\n- Logging patterns\n- User feedback\n</code></pre>"},{"location":"TroubleshootingPrompts/ErrorHandlingPatterns/#anti-patterns-to-avoid","title":"Anti-patterns to Avoid","text":"<ol> <li>Error Handling</li> <li>Catching all errors blindly</li> <li>Swallowing errors</li> <li>Missing error context</li> <li> <p>Inconsistent error formats</p> </li> <li> <p>Error Recovery</p> </li> <li>Infinite retry loops</li> <li>Missing timeout handling</li> <li>Unclear error states</li> <li>Incomplete rollback</li> </ol>"},{"location":"TroubleshootingPrompts/IdentifyingPerformanceBottlenecks/","title":"Identifying Performance Bottlenecks","text":""},{"location":"TroubleshootingPrompts/IdentifyingPerformanceBottlenecks/#prompt-1-analyzing-performance-issues","title":"Prompt 1: Analyzing Performance Issues","text":"<pre><code>Use Case: To help developers identify performance bottlenecks in their code.\n\nPrompt: You are diagnosing performance issues in an application. The application details are as follows:\n\nApplication_name: {application_name}\nPerformance_metrics: {performance_metrics}\n\nGenerate a step-by-step plan to identify performance bottlenecks, including:\n- Analyzing the performance metrics.\n- Identifying critical sections of code.\n- Suggesting profiling techniques.\n\nExample:\nApplication_name: \"E-commerce Website\"\nPerformance_metrics: \"Page load time: 5s, Database query time: 3s\"\nPlan:\n1. Analyze the database queries that are taking the most time.\n2. Check for N+1 query issues.\n3. Identify if caching can be implemented for frequently accessed data.\n</code></pre>"},{"location":"TroubleshootingPrompts/ResolvingDependencyConflicts/","title":"Resolving Dependency Conflicts","text":""},{"location":"TroubleshootingPrompts/ResolvingDependencyConflicts/#prompt-1-resolving-package-dependency-issues","title":"Prompt 1: Resolving Package Dependency Issues","text":"<pre><code>Use Case: To help developers resolve conflicts between package dependencies.\n\nPrompt: You are encountering dependency conflicts in a project. The project details are as follows:\n\nProject_name: {project_name}\nDependency_error: {dependency_error}\n\nGenerate a step-by-step plan to resolve the dependency conflicts, including:\n- Analyzing the dependency tree.\n- Identifying conflicting versions.\n- Suggesting resolution strategies.\n\nExample:\nProject_name: \"Web Application\"\nDependency_error: \"Conflicting requirements for 'requests': app requires 2.25.0, but another package requires &lt;2.24.0\"\nPlan:\n1. Run a dependency resolver to visualize the dependency tree.\n2. Identify which package is requiring the older version of 'requests'.\n3. Check if the package can be updated to support newer versions.\n4. Consider using virtual environments or dependency isolation techniques.\n</code></pre>"}]}